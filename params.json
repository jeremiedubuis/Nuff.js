{"name":"Nuff.js","tagline":"A simple JS framework","body":"## **Nuff.js** ##\r\n\r\nThe idea behind this project is to provide a simple Model Presenter pattern to use in combination with a view framework or native js. It contains simple components such as a Router, a data Validator, Presenters, Models, Collections  and a Dispatcher. Provided alongside the project is a simple example of a todo list using React.\r\n\r\n#### **Presenter** ####\r\n\r\n```javascript\r\n    var todo = Nuff.Presenter({\r\n      init: function() { }\r\n    });\r\n```\r\n**init**: The init function is made to be overridden by the developper. It will be launched upon instantiation.\r\n\r\n**mapViewFunctions (view: object, functions: array, scope: object)**: Attaches each Presenter function in the functions array to the view object. Binds scope to these functions if it is provided.\r\n\r\n\r\n\r\n----------\r\n\r\n\r\n#### **Model** ####\r\n\r\n```javascript\r\nvar Todo = Nuff.Model('Todo', {\r\n\tattributes: {\r\n\t\tdone: false,\r\n\t\ttext: \"\"\r\n\t},\r\n\tinit: function() { }\r\n});\r\n```\r\n\r\n**set (object) || (attribute: string, value)**: Set the model's attributes object either by extending it with an object or by specifying an attribute and value.\r\n\r\n**get( [attribute: string])** : returns a single attribute or all of the objects attributes\r\n\r\n**has(attribute: string)**: return true if provided attribute is set for this model\r\n\r\n**attributeIs (attribute: string, validatorType)* *: Can be used in conjonction with the Nuff Validator to validate a ValidatorType (a RegExp or a pattern defined in the Validator regex object).\r\n\r\n**request (object: object)** : makes an ajax request using the Nuff.ajax function\r\n\r\n\r\n----------\r\n\r\n#### **Collection** ####\r\n\r\nA collection is an array that is extended with helper functions. It verifies that values push are instances of the collection's model attribute.\r\n```javascript\r\nvar Todos = Nuff.Collection({\r\n\tmodel: \"Todo\"\r\n});\r\n```\r\n\r\n**push(model)**: Adds every model provided to the Collection and verifies they are the right type of object\r\n\r\n**sortBy (attribute:string, order: \"<\" || \">\")**: returns every model by attribute value in ascending or descending order\r\n\r\n**getWhere (attribute:string, value) **: returns every model in collection where attribute === value\r\n\r\n**setWhere(attribute: string, oldValue, value)** : sets an attribute to value where it used to be oldValue\r\n\r\n**deleteWhere (attribute: string, value) **: Deletes all models in collection where attribute === value\r\n\r\n**toJSON**: returns every model in collection as json\r\n\r\n----------\r\n\r\n\r\n#### **Dispatcher** ####\r\n\r\nThe dispatcher is a simple component that allows registering of callbacks with strings.\r\n\r\n**register (action: string, callback: function)**: Associates a callback with an action string.\r\n\r\n**unregister (action: string, callback: function)** : Removes a callback action string association\r\n\r\n**dispatch (action:string)** : Activates all callbacks associated to an action string\r\n\r\n**list (action: string)** :ogs all callbacks associated to an action string\r\n```javascript\r\n    new Nuff.Dispatcher();\r\n```\r\n\r\n#### **Router** ####\r\n\r\nThe router allows to bind hashes to callbacks, parameters are passed by slashes and returned as arguments to the callbacks.\r\n```javascript\r\nnew Nuff.Router();\r\n```\r\n\r\n**register (_route: string, callback: function, [ scope: object, listen: bool]) **: Registers a new route from a string and associates a callback function. If scope is defined callback will be associated to it. If listen is defined, the callback will trigger onhashchange.\r\n\r\n**unregister(_route: string)* *: removes route\r\n\r\n**listen(_route: string) **: binds Route callback to the onhashchange event\r\n\r\n**removeListener(_route: string) **: unbinds onhashchange from the Route callback\r\n\r\n**setRoute(_route:string, _silent: bool) *: Changes active hash, if silent is true then doesn't fire callbacks on hashchange\r\n\r\n#### **Validator** ####\r\n\r\nThe validator is a simple tool to centralize type validation, it binds regex and tests values against them.\r\n\r\n```javascript\r\nnew Nuff.Validator();\r\n```\r\n\r\n**set(object: object)**: overrides the regex object of the validator with customized RegExp,\r\n\r\n**validate(type: string || RegExp, value)** : Checks if value matchs provided type in the set regex object or if it matches a provided regexp.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}